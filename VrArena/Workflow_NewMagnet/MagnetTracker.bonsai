<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.7.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:p1="clr-namespace:;assembly=Extensions"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:scr="clr-namespace:Bonsai.Scripting.Expressions;assembly=Bonsai.Scripting.Expressions"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FileCapture">
          <cv:FileName>C:\Users\Utilizador\Desktop\RecTest2\10N20mms_CamL_2.avi</cv:FileName>
          <cv:PlaybackRate>170</cv:PlaybackRate>
          <cv:StartPosition>0</cv:StartPosition>
          <cv:PositionUnits>Frames</cv:PositionUnits>
          <cv:Loop>false</cv:Loop>
          <cv:Playing>true</cv:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="rx:PublishSubject">
        <Name>LowResCamera</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>LowResCamera</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Timestamp" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Value</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="IntProperty">
          <Value>1</Value>
        </Combinator>
      </Expression>
      <Expression xsi:type="rx:Accumulate" />
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BackgroundSubtraction">
          <cv:BackgroundFrames>100</cv:BackgroundFrames>
          <cv:AdaptationRate>0.01</cv:AdaptationRate>
          <cv:ThresholdValue>20</cv:ThresholdValue>
          <cv:ThresholdType>Binary</cv:ThresholdType>
          <cv:SubtractionMethod>Dark</cv:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>External</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>10</cv:MinArea>
          <cv:MaxArea>80</cv:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Centroid</Selector>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="GroupWorkflow">
          <Name>ConvertToMm</Name>
          <Workflow>
            <Nodes>
              <Expression xsi:type="SubscribeSubject">
                <Name>PX2MM</Name>
              </Expression>
              <Expression xsi:type="WorkflowInput">
                <Name>Source1</Name>
              </Expression>
              <Expression xsi:type="MemberSelector">
                <Selector>X</Selector>
              </Expression>
              <Expression xsi:type="MemberSelector">
                <Selector>Y</Selector>
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="rx:Zip" />
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="rx:WithLatestFrom" />
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="p1:UnitTransform" />
              </Expression>
              <Expression xsi:type="ipy:PythonTransform">
                <ipy:Name>ConvertToPoint2f</ipy:Name>
                <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f

@returns(Point2f)
def process(value):
  return Point2f(value.Item1,value.Item2)</ipy:Script>
              </Expression>
              <Expression xsi:type="WorkflowOutput" />
            </Nodes>
            <Edges>
              <Edge From="0" To="5" Label="Source2" />
              <Edge From="1" To="2" Label="Source1" />
              <Edge From="1" To="3" Label="Source1" />
              <Edge From="2" To="4" Label="Source1" />
              <Edge From="3" To="4" Label="Source2" />
              <Edge From="4" To="5" Label="Source1" />
              <Edge From="5" To="6" Label="Source1" />
              <Edge From="6" To="7" Label="Source1" />
              <Edge From="7" To="8" Label="Source1" />
            </Edges>
          </Workflow>
        </Builder>
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Name>Rename Var</scr:Name>
        <scr:Expression>New(
it as Magnet)</scr:Expression>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Magnet</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Threshold">
          <cv:ThresholdValue>25</cv:ThresholdValue>
          <cv:MaxValue>255</cv:MaxValue>
          <cv:ThresholdType>Truncate</cv:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BackgroundSubtraction">
          <cv:BackgroundFrames>100</cv:BackgroundFrames>
          <cv:AdaptationRate>0</cv:AdaptationRate>
          <cv:ThresholdValue>10</cv:ThresholdValue>
          <cv:ThresholdType>Binary</cv:ThresholdType>
          <cv:SubtractionMethod>Dark</cv:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>External</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>5</cv:MinArea>
          <cv:MaxArea>100</cv:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Centroid</Selector>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="GroupWorkflow">
          <Name>ConvertToMm</Name>
          <Workflow>
            <Nodes>
              <Expression xsi:type="SubscribeSubject">
                <Name>PX2MM</Name>
              </Expression>
              <Expression xsi:type="WorkflowInput">
                <Name>Source1</Name>
              </Expression>
              <Expression xsi:type="MemberSelector">
                <Selector>X</Selector>
              </Expression>
              <Expression xsi:type="MemberSelector">
                <Selector>Y</Selector>
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="rx:Zip" />
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="rx:WithLatestFrom" />
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="p1:UnitTransform" />
              </Expression>
              <Expression xsi:type="ipy:PythonTransform">
                <ipy:Name>ConvertToPoint2f</ipy:Name>
                <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f

@returns(Point2f)
def process(value):
  return Point2f(value.Item1,value.Item2)</ipy:Script>
              </Expression>
              <Expression xsi:type="WorkflowOutput" />
            </Nodes>
            <Edges>
              <Edge From="0" To="5" Label="Source2" />
              <Edge From="1" To="2" Label="Source1" />
              <Edge From="1" To="3" Label="Source1" />
              <Edge From="2" To="4" Label="Source1" />
              <Edge From="3" To="4" Label="Source2" />
              <Edge From="4" To="5" Label="Source1" />
              <Edge From="5" To="6" Label="Source1" />
              <Edge From="6" To="7" Label="Source1" />
              <Edge From="7" To="8" Label="Source1" />
            </Edges>
          </Workflow>
        </Builder>
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Name>Rename Var</scr:Name>
        <scr:Expression>New(
it as Fly)</scr:Expression>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Fly</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionExtremes">
          <cv:Method>MajorAxis</cv:Method>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>FindHead</ipy:Name>
        <ipy:Script>import math
import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f
from System import Single, Tuple

# Global Variables
centroid = Point2f(float(0),float(0))
head = Point2f(float(0),float(0))
tail = Point2f(float(0),float(0))
history = float(0)


def distancesquare(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx * dx + dy * dy

def angleline(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return math.atan2(dy, dx)

def cossimilarity(pt1,pt2):
  if (dotproduct(pt1,pt1)*dotproduct(pt2,pt2)) == 0:
    return float(1)
  else:
    return float(dotproduct(pt1,pt2)/(math.sqrt(dotproduct(pt1,pt1))*math.sqrt(dotproduct(pt2,pt2))))

def dotproduct(pt1,pt2):
  return pt1.X*pt2.X+pt1.Y*pt2.Y

@returns(Point2f)
def process(value):
    #Load Global Variables
    global centroid, head, tail, history
    
    pt1 = value.Item1
    pt2 = value.Item2
    pt3 = value.Item3
    d = distancesquare(centroid,pt1)

    if distancesquare(pt3, head) &lt; distancesquare(pt3, tail):
      aux = pt2
      pt2 = pt3
      pt3 = aux
    
    dCentroid = pt1 - centroid
    dHead = head - centroid
    if distancesquare(centroid,pt1) &gt; 1:
      cossim = cossimilarity(dCentroid,dHead)
      history = history + 0.2*cossim
    else:
      history = 1

    if history &lt; 0:
      aux = pt2
      pt2 = pt3
      pt3 = aux

    centroid = pt1
    head = pt2
    tail = pt3

    return head</ipy:Script>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="GroupWorkflow">
          <Name>ConvertToMm</Name>
          <Workflow>
            <Nodes>
              <Expression xsi:type="SubscribeSubject">
                <Name>PX2MM</Name>
              </Expression>
              <Expression xsi:type="WorkflowInput">
                <Name>Source1</Name>
              </Expression>
              <Expression xsi:type="MemberSelector">
                <Selector>X</Selector>
              </Expression>
              <Expression xsi:type="MemberSelector">
                <Selector>Y</Selector>
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="rx:Zip" />
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="rx:WithLatestFrom" />
              </Expression>
              <Expression xsi:type="Combinator">
                <Combinator xsi:type="p1:UnitTransform" />
              </Expression>
              <Expression xsi:type="ipy:PythonTransform">
                <ipy:Name>ConvertToPoint2f</ipy:Name>
                <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f

@returns(Point2f)
def process(value):
  return Point2f(value.Item1,value.Item2)</ipy:Script>
              </Expression>
              <Expression xsi:type="WorkflowOutput" />
            </Nodes>
            <Edges>
              <Edge From="0" To="5" Label="Source2" />
              <Edge From="1" To="2" Label="Source1" />
              <Edge From="1" To="3" Label="Source1" />
              <Edge From="2" To="4" Label="Source1" />
              <Edge From="3" To="4" Label="Source2" />
              <Edge From="4" To="5" Label="Source1" />
              <Edge From="5" To="6" Label="Source1" />
              <Edge From="6" To="7" Label="Source1" />
              <Edge From="7" To="8" Label="Source1" />
            </Edges>
          </Workflow>
        </Builder>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>CalculateOrientation</ipy:Name>
        <ipy:Script>import math
import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f
from System import Single, Tuple

def angleline(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return math.atan2(dy, dx)

@returns(float)
def process(value):
    centroid = value.Item1
    head = value.Item2
    orientation = angleline(centroid,head)
    return float(orientation)</ipy:Script>
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Name>Rename Var</scr:Name>
        <scr:Expression>New(
it as Orientation)</scr:Expression>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Orientation</Selector>
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Name>Rename Var</scr:Name>
        <scr:Expression>New(
it as Head)</scr:Expression>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Head</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:HeadVisualizer" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Name>Rename Var</scr:Name>
        <scr:Expression>New(
it as Frame)</scr:Expression>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Frame</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Timestamp</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Timestamp" />
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Name>Rename Var</scr:Name>
        <scr:Expression>New(
it.Value.Item1 as Frame,
it.Value.Item2 as Fly,
it.Value.Item3 as Head,
it.Value.Item4 as Orientation,
it.Value.Item5 as Magnet,
it.Timestamp as TimeTracking,
it.Value.Item6 as TimeAcquisition)</scr:Expression>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="3" To="44" Label="Source1" />
      <Edge From="4" To="7" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source2" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="7" To="41" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="8" To="39" Label="Source1" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="9" To="18" Label="Source1" />
      <Edge From="10" To="11" Label="Source1" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="13" To="14" Label="Source1" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="14" To="39" Label="Source4" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="17" To="45" Label="Source5" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="19" To="20" Label="Source1" />
      <Edge From="20" To="21" Label="Source1" />
      <Edge From="21" To="22" Label="Source1" />
      <Edge From="22" To="23" Label="Source1" />
      <Edge From="22" To="27" Label="Source1" />
      <Edge From="23" To="24" Label="Source1" />
      <Edge From="23" To="39" Label="Source2" />
      <Edge From="23" To="30" Label="Source1" />
      <Edge From="24" To="33" Label="Source1" />
      <Edge From="24" To="25" Label="Source1" />
      <Edge From="25" To="26" Label="Source1" />
      <Edge From="26" To="45" Label="Source2" />
      <Edge From="27" To="28" Label="Source1" />
      <Edge From="27" To="29" Label="Source1" />
      <Edge From="28" To="30" Label="Source2" />
      <Edge From="29" To="30" Label="Source3" />
      <Edge From="30" To="31" Label="Source1" />
      <Edge From="31" To="32" Label="Source1" />
      <Edge From="31" To="39" Label="Source3" />
      <Edge From="32" To="33" Label="Source2" />
      <Edge From="32" To="37" Label="Source1" />
      <Edge From="33" To="34" Label="Source1" />
      <Edge From="34" To="35" Label="Source1" />
      <Edge From="35" To="36" Label="Source1" />
      <Edge From="36" To="45" Label="Source4" />
      <Edge From="37" To="38" Label="Source1" />
      <Edge From="38" To="45" Label="Source3" />
      <Edge From="39" To="40" Label="Source1" />
      <Edge From="41" To="42" Label="Source1" />
      <Edge From="42" To="43" Label="Source1" />
      <Edge From="43" To="45" Label="Source1" />
      <Edge From="44" To="45" Label="Source6" />
      <Edge From="45" To="46" Label="Source1" />
      <Edge From="46" To="47" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>