<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.7.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:scr="clr-namespace:Bonsai.Scripting.Expressions;assembly=Bonsai.Scripting.Expressions"
                 xmlns:p1="clr-namespace:;assembly=Extensions"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FileCapture">
          <cv:FileName>C:\Users\Miguel\Desktop\Cam1_0.avi</cv:FileName>
          <cv:PlaybackRate>120</cv:PlaybackRate>
          <cv:StartPosition>0</cv:StartPosition>
          <cv:PositionUnits>Frames</cv:PositionUnits>
          <cv:Loop>false</cv:Loop>
          <cv:Playing>true</cv:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="rx:PublishSubject">
        <Name>LowResCamera</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>LowResCamera</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:MaskPolygon">
          <cv:Regions>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>72</cv:X>
                <cv:Y>60</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>0</cv:X>
                <cv:Y>60</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>0</cv:X>
                <cv:Y>0</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>72</cv:X>
                <cv:Y>0</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>376</cv:X>
                <cv:Y>370</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>439</cv:X>
                <cv:Y>370</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>439</cv:X>
                <cv:Y>439</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>376</cv:X>
                <cv:Y>439</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>60</cv:X>
                <cv:Y>359</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>0</cv:X>
                <cv:Y>359</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>0</cv:X>
                <cv:Y>439</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>60</cv:X>
                <cv:Y>439</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>368</cv:X>
                <cv:Y>71</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>439</cv:X>
                <cv:Y>71</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>439</cv:X>
                <cv:Y>0</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>368</cv:X>
                <cv:Y>0</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
          </cv:Regions>
          <cv:MaskType>ToZeroInv</cv:MaskType>
          <cv:FillValue>
            <cv:Val0>0</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Threshold">
          <cv:ThresholdValue>90</cv:ThresholdValue>
          <cv:MaxValue>255</cv:MaxValue>
          <cv:ThresholdType>BinaryInv</cv:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>ConnectedComponent</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>0</cv:MinArea>
          <cv:MaxArea>2000</cv:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="rx:SelectMany">
        <Name>2LargestBinaryRegions</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:SortBinaryRegions" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:TakeBinaryRegions">
                <cv:Count>2</cv:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Concat" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Centroid" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BinaryRegionExtremes">
                <cv:Method>MajorAxis</cv:Method>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:ToArray" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>CheckMissTracking</ipy:Name>
              <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
from System import Tuple

nanpoint = Point2f(float.NaN,float.NaN)

@returns(Tuple[Tuple[Point2f,Point2f,Point2f],Tuple[Point2f,Point2f,Point2f]])
def process(value):

  if len(value) == 0:
    return Tuple.Create(Tuple.Create(nanpoint,nanpoint,nanpoint),
                        Tuple.Create(nanpoint,nanpoint,nanpoint))
  elif len(value) == 1:
    return Tuple.Create(Tuple.Create(value[0].Item1,value[0].Item2.Item1,value[0].Item2.Item2),
                        Tuple.Create(nanpoint,nanpoint,nanpoint))
  else:
    return Tuple.Create(Tuple.Create(value[0].Item1,value[0].Item2.Item1,value[0].Item2.Item2),
                        Tuple.Create(value[1].Item1,value[1].Item2.Item1,value[1].Item2.Item2))
</ipy:Script>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="scr:ExpressionTransform">
              <scr:Name>Rename Var</scr:Name>
              <scr:Expression>New(
it.Item1 as Centroid,
it.Item2 as MajorAxisExtreme1,
it.Item3 as MajorAxisExtreme2)
</scr:Expression>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="scr:ExpressionTransform">
              <scr:Name>Rename Var</scr:Name>
              <scr:Expression>New(
it.Item1 as Centroid,
it.Item2 as MajorAxisExtreme1,
it.Item3 as MajorAxisExtreme2)
</scr:Expression>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="3" To="5" Label="Source1" />
            <Edge From="4" To="6" Label="Source1" />
            <Edge From="5" To="6" Label="Source2" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="8" To="11" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="13" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="12" To="13" Label="Source2" />
            <Edge From="13" To="14" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>DetectFemale</ipy:Name>
        <ipy:Script>import math
import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f
from System import Single, Tuple

# Global Variables
smallPos = Point2f(float(0),float(0))
bigPos = Point2f(float(0),float(0))
smallHis = float(0)
bigHis = float(0)
check = float(25)

def distancesquare(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx * dx + dy * dy

@returns(Tuple[Tuple[Point2f,Point2f,Point2f],Tuple[Point2f,Point2f,Point2f]])
def process(value):
  #Load Global Variables
  global smallPos, bigPos, smallHis, bigHis, check

  bigFly = value.Item1.Centroid
  bigPt1 = value.Item1.MajorAxisExtreme1
  bigPt2 = value.Item1.MajorAxisExtreme2
  smallFly = value.Item2.Centroid
  smallPt1 = value.Item2.MajorAxisExtreme1
  smallPt2 = value.Item2.MajorAxisExtreme2

  if distancesquare(bigFly,bigPos) &gt; distancesquare(smallFly,bigPos):
    auxFly = bigFly
    auxPt1 = bigPt1
    auxPt2 = bigPt2
    bigFly = smallFly
    bigPt1 = smallPt1
    bigPt2 = smallPt2
    smallFly = auxFly
    smallPt1 = auxPt1
    smallPt2 = auxPt2
  
  bigLength = distancesquare(bigPt1,bigPt2)
  smallLength = distancesquare(smallPt1,smallPt2)
  if bigHis == 0:
    bigHis = bigLength
  if smallHis == 0:
    smallHis = smallLength
  dnow = distancesquare(Point2f(bigHis,smallHis),Point2f(bigLength,smallLength))
  dflip = distancesquare(Point2f(smallHis,bigHis),Point2f(bigLength,smallLength))
  if dnow &gt; dflip:
    check = check + 1
  if check == 25:
    auxFly = bigFly
    auxPt1 = bigPt1
    auxPt2 = bigPt2
    bigFly = smallFly
    bigPt1 = smallPt1
    bigPt2 = smallPt2
    smallFly = auxFly
    smallPt1 = auxPt1
    smallPt2 = auxPt2
    bigLength = distancesquare(bigPt1,bigPt2)
    smallLength = distancesquare(smallPt1,smallPt2)
    check = 0
  bigHis = bigHis * 0.99 + bigLength * 0.01
  smallHis = smallHis * 0.99 + smallLength * 0.01
  
  bigPos = bigFly
  smallPos = smallFly
  
  return Tuple.Create(Tuple.Create(smallPos,smallPt1,smallPt2),
                        Tuple.Create(bigFly,bigPt1,bigPt2))</ipy:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>FindHead</ipy:Name>
        <ipy:Script>import math
import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f
from System import Single, Tuple

# Global Variables
centroid = Point2f(float(0),float(0))
head = Point2f(float(0),float(0))
tail = Point2f(float(0),float(0))
history = float(0)


def distancesquare(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx * dx + dy * dy

def angleline(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return math.atan2(dy, dx)

def cossimilarity(pt1,pt2):
  if (dotproduct(pt1,pt1)*dotproduct(pt2,pt2)) == 0:
    return float(1)
  else:
    return float(dotproduct(pt1,pt2)/(math.sqrt(dotproduct(pt1,pt1))*math.sqrt(dotproduct(pt2,pt2))))

def dotproduct(pt1,pt2):
  return pt1.X*pt2.X+pt1.Y*pt2.Y

@returns(Point2f)
def process(value):
    #Load Global Variables
    global centroid, head, tail, history
    
    pt1 = value.Item1
    pt2 = value.Item2
    pt3 = value.Item3
    d = distancesquare(centroid,pt1)

    if distancesquare(pt3, head) &lt; distancesquare(pt3, tail):
      aux = pt2
      pt2 = pt3
      pt3 = aux
    
    dCentroid = pt1 - centroid
    dHead = head - centroid
    if distancesquare(centroid,pt1) &gt; 1:
      cossim = cossimilarity(dCentroid,dHead)
      history = history + 0.2*cossim
    else:
      history = 1

    if history &lt; 0:
      aux = pt2
      pt2 = pt3
      pt3 = aux

    centroid = pt1
    head = pt2
    tail = pt3

    return head</ipy:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>FindHead</ipy:Name>
        <ipy:Script>import math
import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point2f
from System import Single, Tuple

# Global Variables
centroid = Point2f(float(0),float(0))
head = Point2f(float(0),float(0))
tail = Point2f(float(0),float(0))
history = float(0)


def distancesquare(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx * dx + dy * dy

def angleline(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return math.atan2(dy, dx)

def cossimilarity(pt1,pt2):
  if (dotproduct(pt1,pt1)*dotproduct(pt2,pt2)) == 0:
    return float(1)
  else:
    return float(dotproduct(pt1,pt2)/(math.sqrt(dotproduct(pt1,pt1))*math.sqrt(dotproduct(pt2,pt2))))

def dotproduct(pt1,pt2):
  return pt1.X*pt2.X+pt1.Y*pt2.Y

@returns(Point2f)
def process(value):
    #Load Global Variables
    global centroid, head, tail, history
    
    pt1 = value.Item1
    pt2 = value.Item2
    pt3 = value.Item3
    d = distancesquare(centroid,pt1)

    if distancesquare(pt3, head) &lt; distancesquare(pt3, tail):
      aux = pt2
      pt2 = pt3
      pt3 = aux
    
    dCentroid = pt1 - centroid
    dHead = head - centroid
    if distancesquare(centroid,pt1) &gt; 1:
      cossim = cossimilarity(dCentroid,dHead)
      history = history + 0.2*cossim
    else:
      history = 1

    if history &lt; 0:
      aux = pt2
      pt2 = pt3
      pt3 = aux

    centroid = pt1
    head = pt2
    tail = pt3

    return head</ipy:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1.Item1</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2.Item1</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:ConvertColor">
          <cv:Conversion>Gray2Bgra</cv:Conversion>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:TwoFlyVisualizer" />
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="3" To="18" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="9" To="12" Label="Source1" />
      <Edge From="9" To="14" Label="Source1" />
      <Edge From="9" To="16" Label="Source1" />
      <Edge From="10" To="11" Label="Source1" />
      <Edge From="11" To="15" Label="Source2" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="13" To="17" Label="Source2" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="15" To="19" Label="Source2" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="17" To="19" Label="Source3" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="19" To="20" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>